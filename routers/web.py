from fastapi import APIRouter, Request, Depends, Form, HTTPException, FastAPI, status
from fastapi.responses import HTMLResponse, RedirectResponse
from fastapi.templating import Jinja2Templates
from sqlmodel import Session, select, func
from db_ops import parse_float
from db_connection import get_session, AsyncSession
from typing import Optional
from sqlmodels_db import ConsoleSQL, GameSQL
import db_ops as crud  # Debe tener funciones para games y consoles
app = FastAPI()
router = APIRouter()
templates = Jinja2Templates(directory="templates")

# ---------------- HOME ----------------
@router.get("/", response_class=HTMLResponse)
async def home(request: Request):
    return templates.TemplateResponse("home.html", {"request": request})
@router.get("/about", response_class=HTMLResponse)
async def about(request: Request):
    return templates.TemplateResponse("about.html", {"request": request})

# ---------------- CONSOLES ----------------
@router.get("/consoles/view", response_class=HTMLResponse)
async def consoles_list(
    request: Request,
    page: int = 1,
    session: Session = Depends(get_session)
):
    limit = 10  # o el número que prefieras por página
    offset = (page - 1) * limit

    all_consoles = await crud.get_consoles(session)
    total_consoles = len(all_consoles)
    total_pages = (total_consoles + limit - 1) // limit  # redondeo hacia arriba

    consoles = all_consoles[offset : offset + limit]

    return templates.TemplateResponse("consoles/consoles.html", {
        "request": request,
        "consoles": consoles,
        "page": page,
        "total_pages": total_pages
    })
from fastapi import Request, Query

@router.get("/consoles/search", response_class=HTMLResponse)
async def search_consoles(
    request: Request,
    q: str = Query(...),
    session: Session = Depends(get_session)
):
    results = await crud.get_console_key(session, q)
    return templates.TemplateResponse("consoles/consoles.html", {
        "request": request,
        "consoles": results,
        "show_actions": True,
        "page": 1,
        "total_pages": 1
    })


@router.get("/consoles/create", response_class=HTMLResponse)
async def create_console_form(request: Request):
    return templates.TemplateResponse("consoles/create.html", {"request": request})

@router.post("/consoles/create", response_class=HTMLResponse)
async def create_console_from_form(
    request: Request,
    session: AsyncSession = Depends(get_session),
    # REMOVE Id: int = Form(...) if it's the autoincrementing PK
    Console_Name: str = Form(...),
    Type: str = Form(...),
    Company: str = Form(...),
    Released_Year: int = Form(...),
    Discontinuation_Year: Optional[int] = Form(None), # Ensure Optional[int]
    Units_Sold: Optional[float] = Form(None),         # Ensure Optional[float]
):
    try:
        new_console_db = ConsoleSQL(
            # id is autogenerated, DO NOT pass it here (nor 'Id' if it was redundant)
            Console_Name=Console_Name,
            Type=Type,
            Company=Company,
            Released_Year=Released_Year,
            Discontinuation_Year=Discontinuation_Year,
            Units_Sold=Units_Sold
        )
        session.add(new_console_db)
        await session.commit()
        await session.refresh(new_console_db)
        return RedirectResponse(url="/consoles/view", status_code=303)
    except Exception as e:
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=400, detail=f"Error al crear la consola: {e}. Por favor, revisa los datos ingresados.")

@router.get("/consoles/{console_id}/edit", response_class=HTMLResponse)
async def edit_console(request: Request, console_id: int, session: Session = Depends(get_session)):
    console = await crud.update_console(session, console_id)
    if console is None:
        raise HTTPException(status_code=404, detail="Console not found")
    return templates.TemplateResponse("consoles/edit.html", {
        "request": request,
        "console": console
    })


@router.post("/consoles/{console_id}/edit", response_class=HTMLResponse)
async def update_console(
    request: Request,
    console_id: int,
    name: str = Form(...),
    type: str = Form(...),
    company: str = Form(...),
    released_year: int = Form(...),
    discontinuation_year: int = Form(None),
    units_sold: float = Form(...),
    session: Session = Depends(get_session)
):
    updated_data = {
        "Console_Name": name,
        "Type": type,
        "Company": company,
        "Released_Year": released_year,
        "Discontinuation_Year": discontinuation_year,
        "Units_Sold": units_sold
    }
    await crud.update_console(session, console_id, updated_data)
    return RedirectResponse(f"/web/consoles/{console_id}", status_code=303)


@router.get("/consoles/{console_id}/delete", response_class=HTMLResponse)
async def delete_console(request: Request, console_id: int, session: Session = Depends(get_session)):
    await crud.delete_console(session, console_id)
    return RedirectResponse("/web/consoles", status_code=303)

# ---------------- GAMES ----------------
@router.get("/games/view", response_class=HTMLResponse)
async def games_list(request: Request, session: Session = Depends(get_session), page: int = 1, per_page: int = 20):
    skip = (page - 1) * per_page
    games = await crud.get_games_paginated(session, skip=skip, limit=per_page)

    # Calcular el total para saber cuántas páginas mostrar (opcional si tienes muchos juegos)
    total_games = await session.exec(select(func.count()).select_from(GameSQL))
    total = total_games.one()

    total_pages = (total + per_page - 1) // per_page  # Redondear hacia arriba

    return templates.TemplateResponse("/games/games.html", {
        "request": request,
        "games": games,
        "page": page,
        "total_pages": total_pages,
    })
@router.get("/games/search", response_class=HTMLResponse)
async def search_games(
    request: Request,
    q: str = "",
    page: int = 1,
    session: Session = Depends(get_session)
):
    PAGE_SIZE = 10  # o el tamaño que uses normalmente
    all_results = await crud.get_game_key(session, q)
    total_results = len(all_results)
    total_pages = (total_results + PAGE_SIZE - 1) // PAGE_SIZE

    start = (page - 1) * PAGE_SIZE
    end = start + PAGE_SIZE
    paginated_results = all_results[start:end]

    return templates.TemplateResponse("games/games.html", {
        "request": request,
        "games": paginated_results,
        "page": page,
        "total_pages": total_pages,
        "query": q
    })


@router.get("/games/create", response_class=HTMLResponse)
async def create_game_form(request: Request):
    return templates.TemplateResponse("games/create.html", {"request": request})

@router.post("/games/create", response_class=HTMLResponse)
async def create_game_from_form(
    request: Request,
    session: AsyncSession = Depends(get_session),
    # Update types and remove 'id' if it's autoincrementing
    Rank: int = Form(...),
    Game_Title: str = Form(...),
    Platform: str = Form(...),
    Year: int = Form(...), # Changed to int
    Genre: str = Form(...),
    Publisher: str = Form(...),
    North_America: Optional[float] = Form(None), # Ensure Optional[float]
    Europe: Optional[float] = Form(None),
    Japan: Optional[float] = Form(None),
    Rest_of_World: Optional[float] = Form(None),
    Global: Optional[float] = Form(None),
    Review: Optional[str] = Form(None), # Ensure Optional[str]
):
    try:
        new_game_db = GameSQL(
            # id is autogenerated, DO NOT pass it here
            Rank=Rank,
            Game_Title=Game_Title,
            Platform=Platform,
            Year=Year,
            Genre=Genre,
            Publisher=Publisher,
            North_America=North_America,
            Europe=Europe,
            Japan=Japan,
            Rest_of_World=Rest_of_World,
            Global=Global,
            Review=Review
        )
        session.add(new_game_db)
        await session.commit()
        await session.refresh(new_game_db)
        return RedirectResponse(url="/games/view", status_code=303)
    except Exception as e:
        # A more informative error message for the user:
        # For development, print the full traceback:
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=400, detail=f"Error al crear el juego: {e}. Por favor, revisa los datos ingresados.")
@router.get("/games/{game_id}/edit", response_class=HTMLResponse)
async def edit_game(request: Request, game_id: int, session: Session = Depends(get_session)):
    game = await crud.get_game(session, game_id)
    if game is None:
        raise HTTPException(status_code=404, detail="Game not found")
    return templates.TemplateResponse("games/edit.html", {
        "request": request,
        "game": game
    })


@router.post("/games/{game_id}/edit", response_class=HTMLResponse)
async def update_game(
    request: Request,
    game_id: int,
    title: str = Form(...),
    platform: str = Form(...),
    year: int = Form(...),
    genre: str = Form(...),
    publisher: str = Form(...),
    session: Session = Depends(get_session)
):
    updated_data = {
        "Game_Title": title,
        "Platform": platform,
        "Year": year,
        "Genre": genre,
        "Publisher": publisher
    }
    await crud.update_game(session, game_id, updated_data)
    return RedirectResponse(f"/web/games/{game_id}", status_code=303)


@router.get("/games/{game_id}/delete", response_class=HTMLResponse)
async def delete_game(request: Request, game_id: int, session: Session = Depends(get_session)):
    await crud.delete_game(session, game_id)
    return RedirectResponse("/web/games", status_code=303)